# Continuous Deployment
#
# References:
#
# - https://github.com/actions/github-script
# - https://github.com/actions/checkout
# - https://github.com/actions/setup-node
# - https://github.com/rickstaa/action-create-tag
# - https://cli.github.com/manual/gh_release_create
# - https://docs.github.com/en/actions/using-workflows/using-github-cli-in-workflows

---
name: continuous-deployment
on:
  pull_request:
    branches:
      - main
    types: [closed]
  workflow_dispatch:
    inputs:
      version:
        description: release version
        required: true
jobs:
  metadata:
    name: Metadata
    if: |
      github.event.inputs.version ||
      (startsWith(github.event.pull_request.head.ref, 'release/')
      && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    outputs:
      artifact-name: ${{ steps.release.outputs.artifact-name }}
      artifact-path: ${{ steps.release.outputs.artifact-path }}
      dist-tag: ${{ steps.release.outputs.dist-tag }}
      message: ${{ steps.release.outputs.message }}
      prerelease: ${{ steps.release.outputs.prerelease }}
      tag: ${{ steps.release.outputs.tag }}
    steps:
      - id: release
        name: Get release metadata
        uses: actions/github-script@v6.1.0
        with:
          script: |
            const { payload, repo } = context

            let version

            if (payload.pull_request) {
              version = payload.pull_request.head.ref.split('release/')[1]
            }

            if (payload.inputs) version = payload.inputs.version

            const workspace = `@${repo.owner}/${repo.repo}`
            const artifact_name = `${workspace.replace('/', '-')}-${version}`
            const artifact_path = `./${artifact_name}.tgz`

            let dist_tag = version.match(/(?!-)([a-z]+)/)?.[0].trim() ?? ''
            if (dist_tag) dist_tag = `--tag ${dist_tag}`

            core.setOutput('artifact-name', artifact_name)
            core.setOutput('artifact-path', artifact_path)
            core.setOutput('dist-tag', dist_tag)
            core.setOutput('message', `release: ${workspace}@${version}`)
            core.setOutput('prerelease', !!dist_tag)
            core.setOutput('tag', `${repo.repo}@${version}`)
  publish-release:
    name: Publish GitHub release
    needs: metadata
    runs-on: ubuntu-latest
    env:
      GH_PAT: ${{ secrets.PAT_GPR_ADMIN }}
      NPM_TOKEN: ${{ secrets.NPM_TOKEN_ADMIN }}
    strategy:
      matrix:
        node: [16.16.0]
    steps:
      - id: checkout
        name: Checkout branch
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: main
      - id: node
        name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
          scope: '@${{ github.repository_owner }}'
      - id: yarn
        name: Install dependencies
        run: yarn --immutable
        env:
          HUSKY: 0
          NODE_AUTH_TOKEN: ${{ env.GH_PAT }}
      - id: pack
        name: Pack project
        run: yarn pack -o %s-%v.tgz
        env:
          NODE_ENV: production
          NODE_NO_WARNINGS: 1
          NODE_OPTIONS: --es-module-specifier-resolution=node
      - id: release-notes
        name: Generate release notes
        run: |
          ./node_modules/.bin/ts-node ./node_modules/.bin/conventional-changelog -n ./changelog.config.cts -o RELEASE_NOTES.md
        env:
          TS_NODE_PROJECT: ./tsconfig.tsnode.json
      - id: tag
        name: Create and push new tag
        uses: rickstaa/action-create-tag@v1.3.7
        with:
          force_push_tag: true
          message: ${{ needs.metadata.outputs.message }}
          tag: ${{ needs.metadata.outputs.tag }}
      - id: publish
        name: Create and publish release
        run: gh release create $TAG $ASSET -t=$TAG -F=$NOTES_FILE -p=$PRERELEASE
        env:
          ASSET: ${{ needs.metadata.outputs.artifact-path }}
          GITHUB_TOKEN: ${{ env.GH_PAT }}
          NOTES_FILE: ./RELEASE_NOTES.md
          PRERELEASE: ${{ needs.metadata.outputs.prerelease }}
          TAG: ${{ needs.metadata.outputs.tag }}
  publish-package:
    name: Publish package to GPR & NPM
    needs: [metadata, publish-release]
    runs-on: ubuntu-latest
    env:
      GH_PAT: ${{ secrets.PAT_GPR_ADMIN }}
      NPM_TOKEN: ${{ secrets.NPM_TOKEN_ADMIN }}
      SCOPE: '@${{ github.repository_owner }}'
    strategy:
      matrix:
        node: [16.16.0]
    steps:
      - id: checkout
        name: Checkout branch
        uses: actions/checkout@v3
        with:
          ref: main
      - id: setup-npmrc-gpr
        name: Setup .npmrc file [GPR]
        uses: actions/setup-node@v3
        with:
          always-auth: true
          cache: yarn
          node-version: ${{ matrix.node }}
          registry-url: https://npm.pkg.github.com
          scope: ${{ env.SCOPE }}
      - id: yarn
        name: Install dependencies
        run: yarn --immutable
        env:
          HUSKY: 0
          NODE_AUTH_TOKEN: ${{ env.GH_PAT }}
      - id: pack
        name: Pack project
        run: yarn pack -o %s-%v.tgz
        env:
          NODE_ENV: production
          NODE_NO_WARNINGS: 1
          NODE_OPTIONS: --es-module-specifier-resolution=node
      - id: publish-to-gpr
        name: Publish package [GPR]
        run: npm publish $ARTIFACT $DIST_TAG
        env:
          ARTIFACT: ${{ needs.metadata.outputs.artifact-path }}
          DIST_TAG: ${{ needs.metadata.outputs.dist-tag }}
          NODE_AUTH_TOKEN: ${{ env.GH_PAT }}
      - id: setup-npmrc-npm
        name: Setup .npmrc file [NPM]
        uses: actions/setup-node@v3
        with:
          always-auth: true
          cache: yarn
          node-version: ${{ matrix.node }}
          registry-url: https://registry.npmjs.org
          scope: ${{ env.SCOPE }}
      - id: publish-to-npm
        name: Publish package [NPM]
        run: npm publish $ARTIFACT $DIST_TAG
        env:
          ARTIFACT: ${{ needs.metadata.outputs.artifact-path }}
          DIST_TAG: ${{ needs.metadata.outputs.dist-tag }}
          NODE_AUTH_TOKEN: ${{ env.NPM_TOKEN }}
